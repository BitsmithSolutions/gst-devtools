=== Testing with monitors

Using gst-validate monitors is quite simple, there are 2 ways to test your
pipeline/element.

== Creating the monitors yourself
This method requires writing a specific application (or modifying yours) to
add GstValidateMonitors and GstValidateRunner to it. Create a GstValidateRunner
with gst_validate_runner_new, then use gst_validate_monitor_factory_create to
create monitors for your pipeline.

Now all you have to do is use your pipeline as usual, the reports will be
created and posted to the runner. You can list them after the pipeline
finishes to look at the issues found.

== Using LD_PRELOAD and an existing application
If you want to test an already existing application without modifying it. Just
use:

LD_PRELOAD=path/to/libgstvalidatepreload.so yourapp ...

gst-validate will try to replace GstPipeline creating functions and already
configure runners and monitors for you, reports will be printed to stderr when
they are found.


=== Using the file checker
The GstValidateFileChecker is a convenient API to compare a media file
properties with its expected properties. The uri of the file to be tested and
the expected values can be configured via gobject properties.
gst_validate_file_checker_run is used to start the tests.

There is also a convenience tool (gst-validate-file-check) that can be used to
run the file checker.
